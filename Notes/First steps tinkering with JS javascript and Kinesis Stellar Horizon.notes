
--------------------------------------------------------------------


Parsing javascript properly (without regex)  is frustrating for the noob like myself.

Best take it one step at a time

Playfully

Judging from below, the job might even be feasible


--------------------------------------------------------------------

Summary data for the last 10 days with a gap in between (7 days of data in total):


linux> date -d "2023-09-08T00:00:00Z - 10 days"
Di 29 Aug 2023 02:00:00 CEST

10 days with a gap in between
idiosyncratic to say the least

but it is what it is
our purpose here is to document, to figure how it all works overall


linux> date -d "2023-09-08T00:00:00Z - 3 days"
Di 05 Sep 2023 02:00:00 CEST

and then a gap until

linux> date -d "2023-08-31T00:00:00Z - 2 days"
Di 29 Aug 2023 02:00:00 CEST

4 + 3 days in total
7

7 elements in array
Starts at 0 likely
ie
0..6

See proof by experimentation below

--------------------------------------------------------------------

linux ubuntu>

sudo apt install jq

linux> jq --version
jq-1.6

linux> dpkg -l | grep -w jq
ii  jq                                               1.6-2.1ubuntu3                              amd64        lightweight and flexible command-line JSON processor


--------------------------------------------------------------------


linux> curl -s https://kag-mainnet.kinesisgroup.io/coin_in_circulation | jq '.'
{
  "ingest_latest_ledger": 27833501,
  "history_latest_ledger": 27833501,
  "history_latest_ledger_closed_at": "2023-09-10T21:20:22Z",
  "history_elder_ledger": 2,
  "records": [
    {
      "circulation": "3425820.0496000",
      "mint": "8657375.9724000",
      "redemption": "5231555.9228000",
      "date": "2023-08-29T00:00:00Z"
    },
    {
      "circulation": "3430220.0496000",
      "mint": "8661775.9724000",
      "redemption": "5231555.9228000",
      "date": "2023-08-30T00:00:00Z"
    },
    {
      "circulation": "3430620.0496000",
      "mint": "8662175.9724000",
      "redemption": "5231555.9228000",
      "date": "2023-08-31T00:00:00Z"
    },
    {
      "circulation": "3437820.0496000",
      "mint": "8669375.9724000",
      "redemption": "5231555.9228000",
      "date": "2023-09-05T00:00:00Z"
    },
    {
      "circulation": "3438220.0496000",
      "mint": "8669775.9724000",
      "redemption": "5231555.9228000",
      "date": "2023-09-06T00:00:00Z"
    },
    {
      "circulation": "3443420.0496000",
      "mint": "8674975.9724000",
      "redemption": "5231555.9228000",
      "date": "2023-09-07T00:00:00Z"
    },
    {
      "circulation": "3462020.0496000",
      "mint": "8693575.9724000",
      "redemption": "5231555.9228000",
      "date": "2023-09-08T00:00:00Z"
    }
  ]
}


linux> curl -s https://kag-mainnet.kinesisgroup.io/coin_in_circulation | jq '.records[6].circulation, .records[6].mint, .records[6].redemption, .records[6].date,.ingest_latest_ledger'
"3462020.0496000"
"8693575.9724000"
"5231555.9228000"
"2023-09-08T00:00:00Z"
27834052


# First attempt:

curl -s https://kag-mainnet.kinesisgroup.io/coin_in_circulation | jq '.records[1].circulation, .records[1].mint, .records[1].redemption, .records[1].date'

linux> curl -s https://kag-mainnet.kinesisgroup.io/coin_in_circulation | jq '.records[1].circulation, .records[1].mint, .records[1].redemption, .records[1].date'
"3430220.0496000"
"8661775.9724000"
"5231555.9228000"
"2023-08-30T00:00:00Z"

ha
it's not the last record in the list


"-1" tip from here:
https://github.com/jqlang/jq/issues/509


# A better attempt:

linux> curl -s https://kag-mainnet.kinesisgroup.io/coin_in_circulation | jq '.records[-1].circulation, .records[-1].mint, .records[-1].redemption, .records[-1].date'
"3462020.0496000"
"8693575.9724000"
"5231555.9228000"
"2023-09-08T00:00:00Z"
linux> date -u
So 10 Sep 2023 09:01:11 UTC

YES

linux> curl -s https://kag-mainnet.kinesisgroup.io/coin_in_circulation | jq '.records[-1].circulation, .records[-1].mint, .records[-1].redemption, .records[-1].date,.ingest_latest_ledger'
"3462020.0496000"
"8693575.9724000"
"5231555.9228000"
"2023-09-08T00:00:00Z"
27833505



----------------------------------------------

js, jq and the ISS Space Station

where you need to pull both LAT and LONG together else the craft has moved on to a completely new position fast.


Syntax:

curl -s http://api.open-notify.org/iss-now.json | jq '.iss_position.latitude'
{
  "iss_position": {
    "latitude": "39.4619",

linux> curl -s http://api.open-notify.org/iss-now.json | jq '.iss_position.latitude'
"28.2523"
linux> curl -s http://api.open-notify.org/iss-now.json | jq '.iss_position.longitude'
"-23.0843"

linux> curl -s http://api.open-notify.org/iss-now.json | jq '.iss_position.latitude,.iss_position.longitude'
"-50.9704"
"77.4050"
GOTCHA synchronized

linux>  curl -s http://api.open-notify.org/iss-now.json | jq '.iss_position.latitude,.iss_position.longitude' | sed 's/"//g'
51.2481
30.3152

linux> date -u
So 10 Sep 2023 22:52:30 UTC

data !
yay
ultra kewl

--------------
International Space Station Facts and Figures
www.nasa.gov/feature/facts-and-figures
Jan 4, 2023 — An international crew of seven people live and work while traveling at a speed of five miles per second, orbiting Earth about every 90 minutes.
The 20 Most Frequently Asked Questions about ...
www.kennedyspacecenter.com/blog/the-20-most-frequently-aske...
Oct 23, 2020 — How fast does the ISS travel? ... The ISS travels at about 17,500 miles/28,000 kilometers per hour. At this speed, the ISS orbits the Earth every ...

linux> units -t earthradius
6371.01 km = 6371010 m
linux> units -t "earthradius * 2 pi"
40030236 m
linux> units -t "earthradius * 2 pi" mile
24873.636
linux> units -t "earthradius * 2 pi / 90 minutes"
7413.0067 m / s

linux> units -t "earthradius * 2 pi / 90 minutes" "miles / s"
4.6062288

about 5 miles per second indeed

linux> units -t "earthradius * 2 pi / 90 minutes" "nmiles / s"
4.0027034

knots
nautical miles
per second


linux> units -t earthradius_polar
(-earthflattening+1) earthradius_equatorial = 6356751.7 m
linux> units -t earthradius_equatorial
6378136.49 m = 6378136.5 m


linux> units -t "51.2481 degree" "degree;arcminute;arcsecond"
51;14;53.16
linux> units -t "51.2481 degree" dms
51;14;53.16

Assume for the sake of argument the orbit of ISS were polar,

linux> units -t "earthradius_polar * 2 pi / (4 * 90) / 60"
1849.1041 m
linux> units -t nmile m
1852

linux> units -t "(1/60) degree" dms
0;1
linux> units -t "(1/60) degree" arcminute
1

1 arcminute corresponds to about 1 nautical mile

4.0027034
=
about
4 nm

Every second, ISS (at assumed false orbit) moves 4 nm or 4 arcminutes of latitude

linux> units -t "4 arcminute" degree
0.066666667
linux> qalc "1/15"
1 / 15 ≈ 0.06666666667

wait 30 seconds until running the curl command again?
30 * 4 = 120

linux> units -t "120 arcminute" degree
2
linux> units -t "120 nmile" km
222.24

222 km further away if assume orbit were vertical, along a meridian

------------

using manual stopwatch (30 seconds)

linux> curl -s http://api.open-notify.org/iss-now.json | jq '.iss_position.latitude,.iss_position.longitude'
"-50.5469"
"-155.3396"
linux> 
linux> curl -s http://api.open-notify.org/iss-now.json | jq '.iss_position.latitude,.iss_position.longitude'
"-50.0804"
"-152.4221"

Moving along longitude more than along the latitude


More rigorous to fetch exact timestamp as well:

linux> curl -s http://api.open-notify.org/iss-now.json | jq '.iss_position.latitude,.iss_position.longitude,.timestamp'
"-37.9438"
"-121.1054"
1694389605

Then
linux> date -u --date @1694389605 +"%Y-%m-%d-T%T-%Z"
2023-09-10-T23:46:45-UTC

man date

       %s     seconds since 1970-01-01 00:00:00 UTC


linux> date -d "1970-01-01T00:00:00Z + 1694389605 seconds" +"%Y-%m-%d-T%T-%Z"
2023-09-11-T01:46:45-CEST

linux> date +"%Y-%m-%d-T%T-%Z"
2023-09-11-T01:52:30-CEST

Zulu (?) time:

linux> date -u
So 10 Sep 2023 23:51:52 UTC
linux> date -u +"%Y-%m-%d-T%T-%Z"
2023-09-10-T23:52:10-UTC

BEAUTY

Further date syntax experiments:

linux> TZ=Europe/Zurich date --date="2023-09-11-T01:46:45-CEST"
Mo 11 Sep 2023 01:46:45 CEST

linux> TZ=Europe/Zurich date --date="2023-09-10-T23:52:10-UTC"
Mo 11 Sep 2023 01:52:10 CEST

------------


From wiki,
Perigee altitude	413 km (256.6 mi) AMSL[4]
=
LEO
Low Earth orbit

https://en.wikipedia.org/wiki/Low_Earth_orbit
A low Earth orbit (LEO) is an orbit around Earth with a period of 128 minutes or less (making at least 11.25 orbits per day) and an eccentricity less than 0.25.[1] Most of the artificial objects in outer space are in LEO, with an altitude never more than about one-third of the radius of Earth.[2]

linux> units -t "earthradius_polar / 3" km
2118.9172

ook

https://en.wikipedia.org/wiki/Van_Allen_radiation_belt

Earth's two main belts extend from an altitude of about 640 to 58,000 km (400 to 36,040 mi)[2] above the surface, in which region radiation levels vary. The belts are in the inner region of Earth's magnetic field. They trap energetic electrons and protons. Other nuclei, such as alpha particles, are less prevalent. Most of the particles that form the belts are thought to come from the solar wind while others arrive as cosmic rays.[3] By trapping the solar wind, the magnetic field deflects those energetic particles and protects the atmosphere from destruction.

linux> units -t "earthradius_polar" km
6356.7517
linux> units -t "earthradius_polar" "640 km"
9.9324246
linux> units -t "earthradius_polar / 10" km
635.67517

Thus Van Allen Belt starts (1/10) of an Earth radius out

linux> units -t "earthradius_polar" "413 km"
15.391651

ISS is at (1/15) of an Earth radius out






--------------




BEST:
https://www.howtogeek.com/529219/how-to-parse-json-files-on-the-linux-command-line-with-jq/




https://www.baeldung.com/linux/jq-command-json

whoa:
linux> curl -s http://api.open-notify.org/iss-now.json | jq '.'
{	
  "iss_position": {
    "latitude": "39.4619",
    "longitude": "-149.5359"
  },
  "message": "success",
  "timestamp": 1694329930
}


--------------------------------------------------------------------



